{"ast":null,"code":"var _jsxFileName = \"/Users/malith_bandara/Desktop/AI-Dress-Mart/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { login as loginAPI, register as registerAPI, getMe } from '../services/api';\nimport { toast } from 'react-toastify';\n\n// Create AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use AuthContext\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// AuthProvider component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const {\n            data\n          } = await getMe();\n          setUser(data);\n        } catch (error) {\n          console.error('Failed to fetch user:', error);\n          localStorage.removeItem('token');\n          setUser(null);\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const {\n        data\n      } = await loginAPI({\n        email,\n        password\n      });\n      localStorage.setItem('token', data.token);\n      setUser(data.user || data);\n      toast.success('Login successful!');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n      return false;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const {\n        data\n      } = await registerAPI({\n        name,\n        email,\n        password\n      });\n      localStorage.setItem('token', data.token);\n      setUser(data.user || data);\n      toast.success('Registration successful!');\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Registration error:', error);\n      toast.error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed');\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    toast.info('Logged out successfully');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","login","loginAPI","register","registerAPI","getMe","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","data","error","console","removeItem","email","password","setItem","success","_error$response","_error$response$data","response","message","name","_error$response2","_error$response2$data","logout","info","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/malith_bandara/Desktop/AI-Dress-Mart/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { login as loginAPI, register as registerAPI, getMe } from '../services/api';\nimport { toast } from 'react-toastify';\n\n// Create AuthContext\nexport const AuthContext = createContext();\n\n// Custom hook to use AuthContext\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\n// AuthProvider component\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    // Check if user is already logged in on mount\n    useEffect(() => {\n        const checkAuth = async () => {\n            const token = localStorage.getItem('token');\n            if (token) {\n                try {\n                    const { data } = await getMe();\n                    setUser(data);\n                } catch (error) {\n                    console.error('Failed to fetch user:', error);\n                    localStorage.removeItem('token');\n                    setUser(null);\n                }\n            }\n            setLoading(false);\n        };\n\n        checkAuth();\n    }, []);\n\n    const login = async (email, password) => {\n        try {\n            const { data } = await loginAPI({ email, password });\n            localStorage.setItem('token', data.token);\n            setUser(data.user || data); \n            toast.success('Login successful!');\n            return true;\n        } catch (error) {\n            console.error('Login error:', error);\n            toast.error(error.response?.data?.message || 'Login failed');\n            return false;\n        }\n    };\n\n    const register = async (name, email, password) => {\n        try {\n            const { data } = await registerAPI({ name, email, password });\n            localStorage.setItem('token', data.token);\n            setUser(data.user || data);\n            toast.success('Registration successful!');\n            return true;\n        } catch (error) {\n            console.error('Registration error:', error);\n            toast.error(error.response?.data?.message || 'Registration failed');\n            return false;\n        }\n    };\n\n    const logout = () => {\n        localStorage.removeItem('token');\n        setUser(null);\n        toast.info('Logged out successfully');\n    };\n\n    return (\n        <AuthContext.Provider value={{ user, loading, login, register, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}